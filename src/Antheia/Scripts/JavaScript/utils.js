/**
 * Changes the page title (the window title and the header title)
 * @param {String} title the new title of the page
 */
function ant_utils_changePageTitle(title) {
	document.title = title;
	document.querySelector("h1").innerText = title;
}
/**
 * Shows the page menu container (if it is hidden)
 */
function ant_utils_showPageMenu() {
	let menu = document.querySelector(".ant_menu");
	if (menu !== null) {
		menu.classList.add("ant-active");
	}
}
/**
 * Hides the page menu container
 */
function ant_utils_hidePageMenu() {
	let meniu = document.querySelector(".ant_menu");
	if (meniu !== null) {
		meniu.classList.remove("ant-active");
	}
}
/**
 * Shows a page menu item (if it is hidden)
 * @param {String} id the id of the menu to be shown
 */
function ant_utils_showPageMenuItem(id) {
	document.getElementById(id).classList.remove("ant-hidden");
}
/**
 * Hides a page menu item
 * @param {String} id the id of the menu to be hidden
 */
function ant_utils_hidePageMenuItem(id) {
	document.getElementById(id).classList.add("ant-hidden");
}
/**
 * The function checkes if an input has a pre callback defined and runs it,
 * if available. It is triggered just after the user has pressed an input button
 * that will display an interface, but just before the interface is displayed
 * @param {Element} input the input to be checked
 */
function ant_utils_preCallback(input) {
	ant_utils_inputCallback(input, 'pre');
}
/**
 * The function checkes if an input has a post callback defined and runs it,
 * if available. It is triggered for inputs that have additional interfaces,
 * like file, new passwords etc. It is triggered after the input has been updated
 * @param {Element} input the input to be checked
 */
function ant_utils_postCallback(input) {
	ant_utils_inputCallback(input, 'post');
}
/**
 * The function checkes if an input has an callback defined and runs it,
 * if available
 * @param {Element} input the input to be checked
 * @param {"pre"|"post"} action the action to be checked. It can be "pre" (before
 * any input interface is displayed) or "post" (the user has selected a value,
 * the input has been updated and the interface has been deleted)
 */
function ant_utils_inputCallback(input, action) {
	if (input.dataset[action] === undefined) {
		return false;
	}
	if (input.dataset[action] === '') {
		return false;
	}
	if (window[input.dataset[action]] === undefined) {
		throw new Error(action + " function is undefined: " + input.dataset[action]);
	}
	window[input.dataset[action]](input);
}
/**
 * Checks if the browser is compatible with the framework. The function checks
 * if the javascript features used by the framework are available.
 * The calling function will catch any error generated by this function and
 * will redirect the browser to a details page.
 */
function ant_utils_checkCompatibility() {
	let newClass = new ant_alert();
	newClass.setButtonLabel('Just a test');
	if (document.getElementById('ant_compatibilityScript') !== null) {
		setTimeout(() => {
			document.getElementById('ant_compatibilityScript').remove();
		}, 1000);
	}
}