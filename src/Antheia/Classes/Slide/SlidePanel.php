<?php
namespace Cosmin\Antheia\Classes\Slide;
use Cosmin\Antheia\Classes\AbstractClass;
use Cosmin\Antheia\Interfaces\HtmlCode;
/**
 * A panel that contains two containers that can be toggled by the user.
 * @author Cosmin Staicu
 *
 */
class SlidePanel extends AbstractClass implements HtmlCode {
	private $initialVisible;
	private $initialHidden;
	private $htmlId;
	private $control;
	static private $itemCounter = 0;
	public function __construct() {
		parent::__construct();
		$this->initialVisible = [];
		$this->initialHidden = [];
		$this->htmlId = 'ant_panelSlide_'.self::$itemCounter;
		self::$itemCounter++;
		$this->control = new SlideTrigger($this);
	}
	/**
	 * Adds an item to the initially visible container of the panel
	 * @param HtmlCode $item the item to be added
	 */
	public function addVisible(HtmlCode $item):void {
		$this->initialVisible[] = $item;
	}
	/**
	 * Adds an item to the initially hidden container of the panel
	 * @param HtmlCode $item the item to be added
	 */
	public function addHidden(HtmlCode $item):void {
		$this->initialHidden[] = $item;
	}
	/**
	 * Returns the controller for the containers toggle
	 * @return SlideTrigger the controller for the containers toggle
	 */
	public function getController():SlideTrigger {
		return $this->control;
	}
	/**
	 * Returns the HTML id of the panel. The ID is generated automatically
	 * @return string the autogenerated html id of the panel
	 */
	public function getHtmlId():string {
		return $this->htmlId;
	}
	public function getHtml():string {
		$code = '<div id="'.$this->htmlId.'" class="ant_slide">';
		$code .= '<div>';
		/** @var HtmlCode $element */
		foreach ($this->initialHidden as $element) {
			$code .= $element->getHtml();
		}
		$code .= '</div><div>';
		/** @var HtmlCode $element */
		foreach ($this->initialVisible as $element) {
			$code .= $element->getHtml();
		}
		$code .= '</div></div>';
		return $code;
	}
}
?>